## Nahratie balikov, pouzitie Anaconda Jupyter notebook + updatovane baliky.
import numpy as np
import pandas as pd
from tqdm import tqdm_notebook
import pickle
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import datetime as dt
from random import sample
from sklearn.utils import shuffle

def power_law(k_min, k_max, y, kappa):
    return ((k_max**(-kappa+1) - k_min**(-kappa+1))*y  + k_min**(-kappa+1.0))**(1.0/(-kappa + 1.0))

np.random.seed(14)

## Funkcie pre ziskavanie agregovanych vysledkov zo simulacie
def sumlist(x):
    tmp=x[0]
    if len(x)>1:
        for i in x[1:]:
            tmp=tmp+i
    return tmp/len(x)

def stdlist_inf(x):
    tmp=pd.DataFrame(x[0].inf)
    if len(x)>1:
        for i in x[1:]:
            tmp=pd.concat([tmp,pd.DataFrame(i.inf)],1)
    return tmp.apply(np.std,1)

def meanlist_inf(x):
    tmp=pd.DataFrame(x[0].inf)
    if len(x)>1:
        for i in x[1:]:
            tmp=pd.concat([tmp,pd.DataFrame(i.inf)],1)    
    return tmp.apply(np.mean,1)

def meanlist_inf_diff(x):
    tmp_list=x
    tmp=pd.DataFrame(tmp_list[0][:,1,:].sum(0)[1:]-tmp_list[0][:,1,:].sum(0)[:-1])
    for i in tmp_list:
         if len(tmp_list)>1:
            for i in x[1:]:
                tmp=pd.concat([tmp,
                               pd.DataFrame(i[:,1,:].sum(0)[1:]-i[:,1,:].sum(0)[:-1])],
                              1)    
    return tmp.apply(np.mean,1)

def stdlist_inf_diff(x):
    tmp_list=x
    tmp=pd.DataFrame(tmp_list[0][:,1,:].sum(0)[1:]-tmp_list[0][:,1,:].sum(0)[:-1])
    for i in tmp_list:
         if len(tmp_list)>1:
            for i in x[1:]:
                tmp=pd.concat([tmp,
                               pd.DataFrame(i[:,1,:].sum(0)[1:]-i[:,1,:].sum(0)[:-1])],
                              1)    
    return tmp.apply(np.std,1)

# Nahratie populacie
pop = pd.read_excel('./zdroje int/munic_pop.xlsx')
pop_N = np.array(pop['popul'])

# Priradenie populacie k obci
def get_coors_long(x):
    return float(df_coords.loc[df_coords.IDN4.apply(str)==x,'long'])
def get_coors_lat(x):
    return float(df_coords.loc[df_coords.IDN4.apply(str)==x,'lat'])
df_coords=pd.read_excel('./zdroje int/obce1.xlsx')
data_i=pop
data_i.loc[:,'long']=data_i.munic.apply(str).apply(get_coors_long)
data_i.loc[:,'lat']=data_i.munic.apply(str).apply(get_coors_lat)

# Nahratie prvych nakaz
nakazy_sk=pd.read_excel('./zdroje int/cases_Mar19.xlsx')
first_infections=np.zeros(2926)
for i in np.arange(nakazy_sk.shape[0]):
    first_infections[pop.munic==nakazy_sk.KOD.iloc[i]]=nakazy_sk.ID.iloc[i]   

first_infections_original=first_infections

## Funkcia pre nahratie OD matice
def OD_mat_load(path):
    with open(path,'rb') as f:
        OD=pickle.load(f)
        f.close()
    return OD

## Socio-ekonomicke faktory rizika
mrk=pd.read_excel('./zdroje int/KoeficientyR0.xlsx')
mrk.columns=['kod','coef_r0','pct']
mrk.loc[:,'coef_r0']=mrk.coef_r0.apply(lambda x : x**(2/3))
R0_correction_demogr=np.zeros(2926)
for i in np.arange(data_i.shape[0]):
    if data_i.munic[i] in set(mrk.kod):
        R0_correction_demogr[np.where(mrk.kod==data_i.munic[i])[0]]=(mrk.coef_r0[mrk.kod==data_i.munic[i]]*mrk.pct[mrk.kod==data_i.munic[i]])+1*(1-mrk.pct[mrk.kod==data_i.munic[i]])

R0_correction_demogr[R0_correction_demogr==0]=1
R0_correction_demogr=R0_correction_demogr**(1/2)

## R0 2.4
if True:
    U = 0.7
    k_min = 0.165
    k_max = 20
    kappa = 2.5
    nodes_izol = round(U*1000000)
    nodes_neizol = 1000000 - nodes_izol
    beta_vec_neizol = np.zeros(nodes_neizol, float)
    for n in range(nodes_neizol):
        beta_vec_neizol[n] = power_law(k_min, k_max, np.random.uniform(0,1), kappa)
    
    # factor to skew gamma distribution towards low values with the same mean and smaller variance
    gamma_factor = 30
    beta = 0.15*gamma_factor
    scale = 1/gamma_factor

    beta_vec_izol = np.random.gamma(beta, scale, nodes_izol)
    gamma = 0.1

    # create joined vector from two distributions
    beta_unsorted = np.transpose([*np.transpose(beta_vec_izol),*np.transpose(beta_vec_neizol)])
    beta_vec = shuffle(beta_unsorted,random_state=0)
    print('R0 mean: ', beta_vec.mean()/ gamma)
    beta_list_24=beta_vec.tolist()
print('R0_izol mean:', beta_vec_izol.mean() / gamma)
print('R0_neizol mean:', beta_vec_neizol.mean() / gamma)

def adjust_beta(beta_new, beta_orig = beta_list_24):
    m = beta_new / np.average(np.array(beta_orig))
    beta_list_new = m * np.array(beta_orig)
    print('New beta average: ', np.average(beta_list_new))
    return beta_list_new.tolist()

# R0 2.0
beta_list_20 = adjust_beta(beta_new = 0.2)
# R0 1.7
beta_list_17 = adjust_beta(beta_new = 0.17)
# R0 1.5
beta_list_15 = adjust_beta(beta_new = 0.15)
# R0 1.3
beta_list_13 = adjust_beta(beta_new = 0.13)

def simulation(N_popul,OD,alpha_vec,R0_correction_demogr,first_infections,beta_list,gamma=0.1,
               tau= 16/24, T = 300):
    
    N_popul = pop.popul.to_numpy()          
    N_munic = len(N_popul)                 
    SIR = np.zeros(shape=(N_munic, 3)) 
    SIR[:,0] = N_popul                      
    SIR[:, 0] = SIR[:, 0] - first_infections
    SIR[:, 1] = SIR[:, 1] + first_infections     # infikovani presunuti do I skupiny
    row_sums = SIR.sum(axis=1)
    SIR_n = SIR / row_sums[:, np.newaxis]
    gamma_vec = np.full(N_munic, gamma)
    SIR_sim = SIR.copy()
    SIR_nsim = SIR_n.copy()
    
    ## Prebiehame simulaciu
    infected_pop_norm = []
    susceptible_pop_norm = []
    recovered_pop_norm = []
    SIR_sim_arr=np.zeros((SIR_sim.shape[0],SIR_sim.shape[1],T))
     
    print('Average beta: ', np.round(np.average(beta_list),3))
    
    SIR_sim_arr=np.zeros((2926,3,T))
    w=0
    for time_step in tqdm_notebook(range(T)):
    #for time_step in tqdm.notebook.tqdm(range(T)):
        
        alpha = alpha_vec[w]
        #print('Alpha draw:', alpha)
        ## Transmission rate je na kazdu obec ina, prvotne data su z gamma distribucie
        beta_vec = np.array(sample(beta_list,2926))*R0_correction_demogr
        # Matice infekcii
        
        y = SIR_sim[:,0] / N_popul
        x = SIR_sim[:,1] / N_popul
               
        ## Clen 1
        outside_work = beta_vec * SIR_sim[:,0] * SIR_sim[:, 1] / N_popul
        
        ## Clen 2
        # Define the second term
        during_work1 = np.zeros(N_munic) # Second term in the sum
        num_2 = np.zeros(N_munic) # Just to keep the code legible
        denominator_t = N_popul  + OD.sum(axis = 1) - OD.sum(axis = 0)
        num_2=  (SIR_sim[:,0] -y*OD.sum(0))*( np.sum(OD*(x*beta_vec),1)+ (SIR_sim[:,1] - x * OD.sum(0))*beta_vec  )
        ## Clen 3
        during_work1 = num_2/denominator_t
        numerator_t = np.zeros(N_munic)
        numerator_t = ((SIR_sim[:,1]-x*OD.sum(0))*beta_vec + np.sum(OD*beta_vec*x,1))

        during_work2 = np.zeros(N_munic)
        during_work2 = y * np.sum(OD.transpose()*numerator_t/denominator_t,1)
              
        total_new_infect = tau*outside_work + alpha*(1-tau)*during_work1 + alpha*(1-tau)*during_work2      
        ## Nemoze byt viac infikovanych ako susceptible
        total_new_infect = np.where(total_new_infect>SIR_sim[:, 0], SIR_sim[:, 0], total_new_infect)
         
        # Vylieceni
        new_recovered = gamma_vec*SIR_sim[:, 1]
        
        ## Novoinfikovani odchadzaju z kategorie S
        SIR_sim[:, 0] = SIR_sim[:, 0] - total_new_infect
        ## Novoinfikovani prichadzaju do kategorie I a z nej odchadzaju vylieceni
        SIR_sim[:, 1] = SIR_sim[:, 1] + total_new_infect - new_recovered
        ## Vylieceni prichadzaju do kat. R
        SIR_sim[:, 2] = SIR_sim[:, 2] + new_recovered
        SIR_sim = np.where(SIR_sim<0,0,SIR_sim)
        
        # Normalizacia
        row_sums = SIR_sim.sum(axis=1)
        SIR_nsim = SIR_sim / row_sums[:, np.newaxis]
        #SIR_sim_arr[:,:,j]=SIR_sim

        SIR_sim_arr[:,:,w]=SIR_sim
        w=w+1
        S = SIR_sim[:,0].sum()/N_popul.sum()
        I = SIR_sim[:,1].sum()/N_popul.sum()
        R = SIR_sim[:,2].sum()/N_popul.sum()
        infected_pop_norm.append(I)
        susceptible_pop_norm.append(S)
        recovered_pop_norm.append(R)
    ## Vytvorenie konecnej maticu
    res = pd.DataFrame(list(zip(infected_pop_norm, susceptible_pop_norm, recovered_pop_norm)), columns = ['inf','sus','rec'])
    return res,SIR_sim_arr

OD=OD_mat_load('./zdroje int/OD_IFP/OD_final3.pickle')
np.fill_diagonal(OD, 0)
first_infections=first_infections_original*6

N_popul = pop.popul.to_numpy()

## Uprava OD matice, pocet odchodov moze byt maximalne pocet obyvatelov
for j in range(len(N_popul)):
    m = np.sum(OD[:, j]) / N_popul[j]
    if m > 1:
        OD[:, j] = OD[:, j] / m

days = 300
pocet_simulacii = 3

if True:
    percSIR_high=[]
    percSIR_mid=[]
    percSIR_low=[]
    percSIR_low_R20=[]
    percSIR_low_R17=[]
    percSIR_low_R15=[]
    percSIR_low_R13=[]
    SIR_high=[]
    SIR_mid=[]
    SIR_low=[]
    SIR_low_R20=[]
    SIR_low_R17=[]
    SIR_low_R15=[]
    SIR_low_R13=[]
    
    for sim in np.arange(pocet_simulacii):
        print('sim:'+str(sim))
        
        a_high,b_high =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.9,1.1,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_24,gamma=0.1,
                              tau= 16/24, T = days)
        a_mid,b_mid =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.6,0.8,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_24,gamma=0.1,
                              tau= 16/24, T = days)

        a_low,b_low =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.20,0.40,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_24,gamma=0.1,
                              tau= 16/24, T = days)
        
        a_low_R20,b_low_R20 =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.20,0.40,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_20,gamma=0.1,
                              tau= 16/24, T = days)
        
        a_low_R17,b_low_R17 =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.20,0.40,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_17,gamma=0.1,
                              tau= 16/24, T = days)
        
        a_low_R15,b_low_R15 =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.20,0.40,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_15,gamma=0.1,
                              tau= 16/24, T = days)
        
        a_low_R13,b_low_R13 =simulation(N_popul=pop_N,OD=OD,alpha_vec=np.random.uniform(0.20,0.40,days),
                              R0_correction_demogr=R0_correction_demogr,
                              first_infections=first_infections,beta_list=beta_list_13,gamma=0.1,
                              tau= 16/24, T = days)
        
        
        
        percSIR_high.append(a_high)
        percSIR_mid.append(a_mid)
        percSIR_low.append(a_low)
        percSIR_low_R20.append(a_low_R20)
        percSIR_low_R17.append(a_low_R17)
        percSIR_low_R15.append(a_low_R15)
        percSIR_low_R13.append(a_low_R13)
        SIR_high.append(b_high)
        SIR_mid.append(b_mid)
        SIR_low.append(b_low)
        SIR_low_R20.append(b_low_R20)
        SIR_low_R17.append(b_low_R17)
        SIR_low_R15.append(b_low_R15)
        SIR_low_R13.append(b_low_R13)

    #with open('./vystupy_model/simulations_26.3.2020.pickle','wb') as f:
    #    pickle.dump([percSIR_high,percSIR_mid,percSIR_low,percSIR_low_R20,percSIR_low_R17,percSIR_low_R15,percSIR_low_R13,
    #         SIR_high,SIR_mid,SIR_low,SIR_low_R20,SIR_low_R17,SIR_low_R15,SIR_low_R13],f)
    
    results=[percSIR_high,percSIR_mid,percSIR_low,percSIR_low_R20,percSIR_low_R17,percSIR_low_R15,percSIR_low_R13,
             SIR_high,SIR_mid,SIR_low,SIR_low_R20,SIR_low_R17,SIR_low_R15,SIR_low_R13]

## Grafy

## Graf vrcholov nakazy, standardny

with open('./vystupy_model/simulations_26.3.2020.pickle','rb') as f:
    results=pickle.load(f)
    f.close()
        
total_days = 300

day_zero = dt.datetime.now() - dt.timedelta(days = 3) 
end = day_zero + dt.timedelta(days=total_days)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

months = mdates.MonthLocator()  # every month

day_zero = dt.datetime.now() - dt.timedelta(days = 3) 
end = day_zero + dt.timedelta(days=total_days)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

sns.set(rc={'figure.figsize':(11, 4)})    
    
fig, ax = plt.subplots()
clrs=['red','orange','yellow','blue', 'purple','magenta','green']
with sns.axes_style("darkgrid"):
    for i in range(4):
        means = np.array(meanlist_inf(results[i]), dtype=np.float64)
        sdt = np.array(stdlist_inf(results[i]), dtype=np.float64)
        ax.plot(days, means, c=clrs[i])
        ax.fill_between(days, means-2*sdt, means+2*sdt ,alpha=0.3, facecolor=clrs[i])
        ax.set_xlim([dt.date(2020, 3, 22), dt.date(2021, 1, 1)])
        ax.xaxis.set_major_locator(months)
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b' '%y'))

plt.title('Porovnanie peaku infekcie podľa mobility')
plt.ylabel('Pomer nakazených')
plt.legend(['Vysoká mobilita, R0 2.4','Stredná mobilita, R0 2.4','Nízka mobilita, R0 2.4',
            'Nízka mobilita, R0 2.0'])

plt.savefig('./plots/v9_plot_inf_rel_alpha_high.png',dpi=300)
plt.close

means_high = np.array(meanlist_inf(results[0]), dtype=np.float64)
means_mid = np.array(meanlist_inf(results[1]), dtype=np.float64)
means_low = np.array(meanlist_inf(results[2]), dtype=np.float64)
means_low_R20 = np.array(meanlist_inf(results[3]), dtype=np.float64)
#means_low_R17 = np.array(meanlist_inf(results[4]), dtype=np.float64)
#means_low_R15 = np.array(meanlist_inf(results[5]), dtype=np.float64)
#means_low_R13 = np.array(meanlist_inf(results[6]), dtype=np.float64)
print('Alpha 1.0, R0 2.4, Peak: ', np.round(means_high.max(),3),        ', Day: ' , means_high.argmax() )
print('Alpha 0.7, R0 2.4, Peak: ', np.round(means_mid.max(),3),         ', Day: ' , means_mid.argmax())
print('Alpha 0.3, R0 2.4, Peak'  , np.round(means_low.max(),3),         ', Day: ' , means_low.argmax())
print('Alpha 0.3, R0 2.0, Peak: ', np.round(means_low_R20.max(),3),     ', Day: ' , means_low_R20.argmax())
#print('Alpha 0.3, R0 1.7, Peak: ', np.round(means_low_R17.max(),3),     ', Day: ' , means_low_R17.argmax())
#print('Alpha 0.3, R0 1.5, Peak: ', np.round(means_low_R15.max(),3),     ', Day: ' , means_low_R15.argmax())
#print('Alpha 0.3, R0 1.3, Peak: ', np.round(means_low_R13.max(),3),     ', Day: ' , means_low_R13.argmax())

## Graf vrcholov nakazy, nizke scenare
        
total_days = 300

day_zero = dt.datetime.now() - dt.timedelta(days = 3) 
end = day_zero + dt.timedelta(days=total_days)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

months = mdates.MonthLocator()  # every month

day_zero = dt.datetime.now() - dt.timedelta(days = 3) 
end = day_zero + dt.timedelta(days=total_days)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

sns.set(rc={'figure.figsize':(11, 4)})    
    
fig, ax = plt.subplots()
clrs=['red','orange','yellow','blue', 'purple','magenta','green']
with sns.axes_style("darkgrid"):
    for i in range(4):
        means = np.array(meanlist_inf(results[i+3]), dtype=np.float64)
        sdt = np.array(stdlist_inf(results[i+3]), dtype=np.float64)
        ax.plot(days, means, c=clrs[i+3])
        ax.fill_between(days, means-2*sdt, means+2*sdt ,alpha=0.3, facecolor=clrs[i+3])
        ax.set_xlim([dt.date(2020, 3, 22), dt.date(2021, 1, 1)])
        ax.xaxis.set_major_locator(months)
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b' '%y'))


plt.title('Porovnanie peaku infekcie podľa mobility')
plt.ylabel('Pomer nakazených')
plt.legend(['Nízka mobilita, R0 2.0', 'Nízka mobilita, R0 1.7', 'Nízka mobilita, R0 1.5', 'Nízka mobilita, R0 1.3',])

plt.savefig('./plots/v9_plot_inf_rel_low_alpha.png',dpi=300)
plt.close

means_low_R20 = np.array(meanlist_inf(results[3]), dtype=np.float64)
means_low_R17 = np.array(meanlist_inf(results[4]), dtype=np.float64)
means_low_R15 = np.array(meanlist_inf(results[5]), dtype=np.float64)
means_low_R13 = np.array(meanlist_inf(results[6]), dtype=np.float64)
print('Alpha 0.3, R0 2.0, Peak: ', np.round(means_low_R20.max(),3),     ', Day: ' , means_low_R20.argmax())
print('Alpha 0.3, R0 1.7, Peak: ', np.round(means_low_R17.max(),3),     ', Day: ' , means_low_R17.argmax())
print('Alpha 0.3, R0 1.5, Peak: ', np.round(means_low_R15.max(),3),     ', Day: ' , means_low_R15.argmax())
print('Alpha 0.3, R0 1.3, Peak: ', np.round(means_low_R13.max(),3),     ', Day: ' , means_low_R13.argmax())

sns.set(rc={'figure.figsize':(11, 4)})     

day_zero = dt.datetime.now() - dt.timedelta(days = 2) 
end = day_zero + dt.timedelta(days=299)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

fig, ax = plt.subplots()
clrs=['red','orange','green','blue']
with sns.axes_style("darkgrid"):
    for i in range(4):
        means = np.array(meanlist_inf_diff(results[i+7]), dtype=np.float64)
        sdt = np.array(stdlist_inf_diff(results[i+7]), dtype=np.float64)
        ax.plot(days, means, c=clrs[i])
        #ax.fill_between(epochs, means-2*sdt, means+2*sdt ,alpha=0.3, facecolor=clrs[i])
        ax.set_xlim([dt.date(2020, 3, 22), dt.date(2021, 1, 1)])
        ax.xaxis.set_major_locator(months)
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b' '%y'))

plt.title('Zmena v počte infikovaných')
#plt.xlabel('Dni')
plt.legend(['Vysoká mobilita','Stredná mobilita','Nízka mobilita','Nízka mobilita, R0 2.0'])
#plt.ylabel('Počet')
plt.savefig('./plots/v9_plot_inf_abs.png',dpi=300)
plt.close

## Tabuľky

## Tabulka 1
days = 300
A = pd.DataFrame({'Dni':np.arange(days),
              'I_high':np.sum(sumlist(results[7])[:,1,:], axis = 0),
              'I_med':np.sum(sumlist(results[8])[:,1,:], axis = 0),
              'I_low':np.sum(sumlist(results[9])[:,1,:], axis = 0),
              'I_low_R20':np.sum(sumlist(results[10])[:,1,:], axis = 0)
             })

# Vyber konkretnych dni


A.columns = ['Počet dní', 'Vysoká mobilita, Počet infikovaných', 'Stredná mobilita, Počet infikovaných',
             'Nízka mobilita, Počet infikovaných', 'Opatrenia 24.3.2020, Počet infikovaných']

A.to_excel('./tabulky/v9_Pocet_infikovanych.xlsx')

A = A.iloc[ [10,20,30, 40, 50, 60, 80, 100, 150, 200] , :]

A.to_excel('./tabulky/v9_Tabulka1.xlsx',engine='xlsxwriter', index = False)

## Tabulka 3 (Tabulka 2 je staticka) -- tabulka pouziva scenar s najprisnejsimi opatreniami
B = A.loc[:, ['Počet dní', 'Opatrenia 24.3.2020, Počet infikovaných']].copy()
B.columns = ['Počet dní', 'Počet infikovaných']
B['Symptomatickí pacienti'] = B['Počet infikovaných']*0.6
B['Hospitalizácie'] = B['Symptomatickí pacienti']*0.074306
B['Vyžadujúci intenzívnu starostlivosť'] = B['Hospitalizácie']*0.1375


B.to_excel('./tabulky/v9_Tabulka3.xlsx',engine='xlsxwriter', index = False)

## Vystup alpha 0.3, R0 2.4
sim_df_low = pd.DataFrame({'Dni':np.arange(1,301),
                       'S': np.sum(sumlist(results[7])[:,0,:], axis = 0),
                       'I': np.sum(sumlist(results[7])[:,1,:], axis = 0),
                       'R': np.sum(sumlist(results[7])[:,2,:], axis = 0)})

sim_df_low['Populácia'] = sim_df_low['S'] + sim_df_low['I'] +sim_df_low['R']
sim_df_low['I_cum'] =  N - sim_df_low['S']

new_infect = np.array(-sim_df_low['S'].iloc[1:]) + np.array(sim_df_low['S'].iloc[0:-1]) 
new_infect = np.insert(new_infect, 0, 1050, axis = 0)
new_recovered = np.array( sim_df_low['R'].iloc[1:]) -np.array(sim_df_low['R'].iloc[0:-1]) 
new_recovered = np.insert(new_recovered, 0, 105, axis = 0)

sim_df_low['Nové infekcie'] = new_infect
sim_df_low['Novovyliečení'] = new_recovered

sim_df_low.columns = ['Dni','Náchylní','Infikovaní','Vyliečení', 'Populácia','Niekedy infikovaní','Nové infekcie', 'Novovyliečení']
sim_df_low.to_excel('./tabulky/v9_SIR_vystup_alpha_0.3_R0_2.4.xlsx', index = False)

## Vystup alpha 0.3, R0 2.0
sim_df_low = pd.DataFrame({'Dni':np.arange(1,301),
                       'S': np.sum(sumlist(results[8])[:,0,:], axis = 0),
                       'I': np.sum(sumlist(results[8])[:,1,:], axis = 0),
                       'R': np.sum(sumlist(results[8])[:,2,:], axis = 0)})

sim_df_low['Populácia'] = sim_df_low['S'] + sim_df_low['I'] +sim_df_low['R']
sim_df_low['I_cum'] =  N - sim_df_low['S']

new_infect = np.array(-sim_df_low['S'].iloc[1:]) + np.array(sim_df_low['S'].iloc[0:-1]) 
new_infect = np.insert(new_infect, 0, 1050, axis = 0)
new_recovered = np.array( sim_df_low['R'].iloc[1:]) -np.array(sim_df_low['R'].iloc[0:-1]) 
new_recovered = np.insert(new_recovered, 0, 105, axis = 0)

sim_df_low['Nové infekcie'] = new_infect
sim_df_low['Novovyliečení'] = new_recovered

sim_df_low.columns = ['Dni','Náchylní','Infikovaní','Vyliečení', 'Populácia','Niekedy infikovaní','Nové infekcie', 'Novovyliečení']
sim_df_low.to_excel('./tabulky/v9_SIR_vystup_alpha_0.3_R0_2.0.xlsx', index = False)

## Tabulka kumulativnych poctov (v texte nepouzita)
N = np.sum(pop.popul.to_numpy())

#means_low = np.array(meanlist_sus(results[7]), dtype=np.float64)
C = pd.DataFrame({'Dni':np.arange(days),
                  'S_high': np.sum(sumlist(results[7])[:,0,:], axis = 0),
                 'S_med': np.sum(sumlist(results[8])[:,0,:], axis = 0),
                 'S_low': np.sum(sumlist(results[9])[:,0,:], axis = 0),
                 'S_low_R20': np.sum(sumlist(results[10])[:,0,:], axis = 0)})

N = np.sum(pop.popul.to_numpy())
C['I_cum_high'] = N - C['S_high']
C['I_cum_med'] = N -  C['S_med']
C['I_cum_low'] = N -  C['S_low']
C['I_cum_low_R20'] = N - C['S_low_R20']

C = C.drop(['S_high', 'S_med', 'S_low', 'S_low_R20'], axis = 1)
D = C.copy()

C.columns = ['Počet dní','# inf., kumulatív, vysoká mobilita',
             '# inf., kumulatív, stredná mobilita', '# inf., kumulatív, nízka mobilita',
             '# inf., kumulatív, nízka mobilita, R0 2.0']

C.to_excel('./tabulky/v9_Tabulka_kum_inf_all_days.xlsx',engine='xlsxwriter', index = False)


C = C.iloc[ [10,20,30, 40, 50, 60, 80, 100, 150, 200] , :]


C.to_excel('./tabulky/v9_Tabulka_kum_inf.xlsx',engine='xlsxwriter', index = False)

## Tabulka novych infekcii v case (v texte pouzita vo forme grafu)
new_inf_high = np.array(D['I_cum_high'].iloc[1:]) - np.array(D['I_cum_high'].iloc[0:-1])
new_inf_med  = np.array(D['I_cum_med'].iloc[1:]) - np.array(D['I_cum_med'].iloc[0:-1])
new_inf_low  = np.array(D['I_cum_low'].iloc[1:]) - np.array(D['I_cum_low'].iloc[0:-1])
new_inf_low2 = np.array(D['I_cum_low_R20'].iloc[1:]) - np.array(D['I_cum_low_R20'].iloc[0:-1])
E = pd.DataFrame({'Deň':np.array(range(1,300,1)), 
                  'Nové infekcie, vysoká mobilita': new_inf_high, 'Nové infekcie, stredná mobilita':new_inf_med, 
                  'Nové infekcie, nízka mobilita':new_inf_low, 'Nové infekcie, nízka mobilita, R0 2.0':new_inf_low2})
E.to_excel('./tabulky/v9_Nove_infekcie_v_case.xlsx', index = False)

## Graf poctu novych nakaz v case
sns.set(rc={'figure.figsize':(11, 4)})    

day_zero = dt.datetime.now() - dt.timedelta(days = 2) 
end = day_zero + dt.timedelta(days=299)
days = mdates.drange(day_zero,end,dt.timedelta(days=1))

fig, ax = plt.subplots()
clrs=['red','orange','green','blue']
with sns.axes_style("darkgrid"):
    epochs = list( E['Deň'] )    
    for i in range(4):
        means = np.array(E.iloc[:, i+1] , dtype=np.float64)
        ax.plot(days, means, c=clrs[i])
        ax.set_xlim([dt.date(2020, 3, 22), dt.date(2021, 1, 1)])
        ax.xaxis.set_major_locator(months)
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b' '%y'))

plt.title('Počet nových infekcií')
plt.legend(['Vysoká mobilita','Stredná mobilita','Nízka mobilita','Nízka mobilita, nízke R0'])
#plt.ylabel('Počet')
plt.savefig('./plots/v9_plot_inf_nove.png',dpi=300)
plt.close

## Tabulka zmena v pocte infikovanych na den
F = pd.DataFrame({'Deň':np.arange(1,300),
              'Zmena v počte infikovaných, vysoká mobilita': np.array(meanlist_inf_diff(results[7])),
              'Zmena v počte infikovaných, stredná mobilita': np.array(meanlist_inf_diff(results[8])),
              'Zmena v počte infikovaných, nízka mobilita': np.array(meanlist_inf_diff(results[9])),
              'Zmena v počte infikovaných, nízka mobilita, R0 2.0': np.array(meanlist_inf_diff(results[10]))})
F.to_excel('./tabulky/v9_zmena_v_pocte_infikovanych.xlsx')

